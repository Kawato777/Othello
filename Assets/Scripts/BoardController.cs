using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BoardController : MonoBehaviour
{
    // マスの状態
    const int EMPTY = 0;
    const int WHITE = -1;
    const int BLACK = 1;
    const int WALL = 2;

    // ボードサイズ
    const int BOARD_SIZE = 8;

    // ボードの配列
    int[][] boardCondition = new int[BOARD_SIZE + 2][];

    // セル情報の配列関係
    BoardCell[][] boardCells = new BoardCell[BOARD_SIZE][];
    [SerializeField] GameObject cellsObj;

    // 試合情報
    int currentColor;

    // Start is called before the first frame update
    void Start()
    {
        FirstSetting();
    }

    private void FirstSetting()
    {
        // 盤面の設定
        // 壁の設定
        for(int m = 0;m < boardCondition.Length; m++)
        {
            boardCondition[m] = new int[BOARD_SIZE + 2];
        }
        Array.Fill(boardCondition[0], WALL);
        Array.Fill(boardCondition[BOARD_SIZE + 1], WALL);
        for (int m = 0; m < boardCondition.Length; m++)
        {
            for(int n = 0;n < boardCondition[m].Length; n++)
            {
                if(n == 0 || n == BOARD_SIZE + 1){
                    boardCondition[m][n] = WALL;
                }
            }
        }
        // 初期配置
        boardCondition[4][4] = WHITE;
        boardCondition[5][5] = WHITE;
        boardCondition[4][5] = BLACK;
        boardCondition[5][4] = BLACK;

        // セル情報の取得
        BoardCell[] boardCells_getting = cellsObj.GetComponentsInChildren<BoardCell>();
        for (int m = 0; m < boardCells.Length; m++)
        {
            BoardCell[] copied = new BoardCell[BOARD_SIZE];
            Array.Copy(boardCells_getting, m * 8, copied, 0, BOARD_SIZE);
            Array.Reverse(copied);
            boardCells[m] = copied;
        }

        // 初期配置の表示
        StatusUpdate();

        // 試合情報の設定
        currentColor = BLACK;
    }

    private void StatusUpdate()
    {
        for (int m = 1; m < boardCondition.Length; m++)
        {
            if(!(m == BOARD_SIZE + 1))
            {
                for (int n = 1; n < boardCondition[m].Length; n++)
                {
                    if(!(n == BOARD_SIZE + 1))
                    {
                        boardCells[m - 1][n - 1].ViewUpdate(boardCondition[m][n]);
                    }
                }
            }
        }
    }

    public void PutStone(RaycastHit hit)　// 石を置く
    {
        // test
        // Debug.Log(hit.collider.GetComponent<BoardCell>().cellPlace);
        if (hit.collider.CompareTag("Cell"))
        {
            BoardCell hitCell = hit.collider.GetComponent<BoardCell>();
            // 石を置けるかどうか
            if (CheckPuttingStone(hitCell))
            {
                // 実際に石を置く
                boardCondition[(int)hitCell.cellPlace.x][9 - (int)hitCell.cellPlace.y] = currentColor;
                StatusUpdate();
                currentColor *= -1;
            }
            else
            {
                // 石が置けない
                Debug.Log("そこには置けません");
            }
        }
        else
        {
            // マスを選択していない
            Debug.Log("マスを選択してください。");
        }
    }

    // 石を置けるかどうかを確かめる関数
    private bool CheckPuttingStone(BoardCell hitCell)
    {
        // 選択したマスがEMPTYであるか
        if(!(hitCell.status == EMPTY))
        {
            return false;
        }

        // 選択したマスをひっくり返せるか

        return true;
    }
}
